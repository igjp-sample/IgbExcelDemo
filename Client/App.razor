@using System.Text.Json
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@using Toolbelt.Blazor.Extensions
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject LazyAssemblyLoader AssemblyLoader

<h1>直近1週間の1日ごと地震発生回数</h1>

@if (this._EarthquakeCountParDays != null)
{
    <IgbDataGrid DataSource="this._EarthquakeCountParDays" Width="380px"></IgbDataGrid>

    <div style="margin-top: 12px;">
        <IgbButton Variant="ButtonVariant.Contained" @onclick="OnClickedDownloadAsync">
            Excel ファイルでダウンロード
        </IgbButton>
    </div>
}

@if (_Processing)
{
    <div>
        <IgbCircularProgress id="circular-progress" Indeterminate Height="80px" Width="80px" />
    </div>
}

@code
{
    /// <summary>
    /// 直近1週間の1日ごと地震発生回数です (OnInitializedAsync のタイミングで初期化されます)
    /// </summary>
    private IEnumerable<EarthquakeCountParDay>? _EarthquakeCountParDays;

    /// <summary>
    /// Excel ファイルへの変換・ダウンロード処理中に true になり、ページ上にプログレス表示を行ないます。
    /// </summary>
    private bool _Processing = false;

    /// <summary>
    /// このコンポーネントの初期化時に呼び出され、直近1週間の1日ごと地震発生回数データを初期化します。
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // 地震発生情報を、API サーバーから取得し...
        var earthquakeDateTimes = await this.HttpClient.GetFromJsonAsync<DateTime[]>("./api/earthquake/datetimes") ?? new DateTime[0];

        // 直近1週間の1日ごと地震発生回数に集計します。
        var dateRange = Enumerable.Range(0, 7).Select(n => DateTime.Today.AddDays(-n));
        this._EarthquakeCountParDays = dateRange.GroupJoin(
            inner: earthquakeDateTimes,
            outerKeySelector: date => date,
            innerKeySelector: dateTime => dateTime.Date,
            resultSelector: (date, dateTimes) => new EarthquakeCountParDay(date, dateTimes.Count()));
    }

    /// <summary>
    /// [ダウンロード] ボタンがクリックされたときに呼び出され、直近1週間の1日ごと地震発生回数データを Excel ファイルに収めてダウンロードさせます。
    /// </summary>
    private async Task OnClickedDownloadAsync()
    {
        this._Processing = true;
        try
        {
            // プロジェクトファイル (IgbExcelDemo.Client.csproj) にて遅延読み込みを指定しておいた
            // アセンブリファイル (.dll) を、ここで AssemblyLoader を使って読み込みます。
            // (補足: 繰り返し何度も呼び出しても大丈夫です、まだいちども読み込まれていない .dll のみが読み込まれます)
            await this.AssemblyLoader.LoadAssembliesAsync(new[]
            {
                "IgniteUI.Blazor.Documents.Core.dll",
                "IgniteUI.Blazor.Documents.Excel.dll"
            });

            // アセンブリの遅延読み込みを行なってから、その遅延読み込みされるアセンブリ内の機能を使うメソッドを呼び出します。
            // (アセンブリの遅延読み込みを行なうメソッド内で直接、遅延読み込みしたアセンブリ内の機能を参照していると、
            //  System.IO.FileNotFoundException: Could not load file or assembly 例外が発生します。)
            await this.DownloadAsExcelAsync();
        }
        finally { this._Processing = false; }
    }

    /// <summary>
    /// アセンブリの遅延読み込みを有効にするために、Excel ライブラリを使用するコードを独立したメソッドに切り出します。
    /// </summary>
    private async ValueTask DownloadAsExcelAsync()
    {
        if (this._EarthquakeCountParDays == null) return;

        // ⚠️注意 - Blazor WebAssembly 上で Excel ライブラリを使うには、Workbook.InProcessRuntime 静的プロパティの初期設定が必要です。
        if (Workbook.InProcessRuntime == null) Workbook.InProcessRuntime = this.JSRuntime as IJSInProcessRuntime;

        // 雛形の Excel ファイルをサーバーから取得し、Workbook オブジェクトに読み込みます。
        await using var templateStream = await this.HttpClient.GetStreamAsync("./TemplateBook.xlsx");
        var workBook = Workbook.Load(templateStream);
        await templateStream.DisposeAsync();

        // シートの中身 (セル) に、地震発生の日付と回数を転記していきます。
        var sheet = workBook.Worksheets[0];
        var row = 2;
        foreach (var item in this._EarthquakeCountParDays)
        {
            sheet.GetCell($"A{row}").Value = item.Date;
            sheet.GetCell($"B{row}").Value = item.Count;
            row++;
        }

        // 記入が終わった Workbook オブジェクトを .xlsx ファイル形式に書き出し、ブラウザにダウンロードさせます。
        await using var memStream = new MemoryStream();
        workBook.Save(memStream);
            await this.JSRuntime.InvokeDownloadAsync("Book.xlsx", "application/octet-stream", memStream.ToArray());
    }
}